{"version":3,"sources":["components/Body.js","components/Footer.js","components/Game.js","components/pictureCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Footer","Game","Cards","props","alt","src","App","components_Body","components_Game","pictureCard","pictures","name","image","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0hEAiCeA,MA5Bf,WACE,OACFC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACdH,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACdH,EAAAC,EAAAC,cAAA,oCAIFF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACjBH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0FCJeE,MAhBf,WACE,OACFJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,0BCGWE,MATf,WACE,OACFL,EAAAC,EAAAC,cAAA,mBCQeI,MAVf,SAAgBC,GACZ,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAKD,EAAMC,IAAKC,IAAKF,EAAME,gBC4DjCC,MA3Df,WACE,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACW,EAAD,CACML,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEvBhB,EAAAC,EAAAC,cAACW,EAAD,CACAL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,GAAGC,KACjBN,IAAKK,EAAS,GAAGE,QAEXhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,IAAIC,KAClBN,IAAKK,EAAS,IAAIE,QAEZhB,EAAAC,EAAAC,cAACW,EAAD,CACNL,IAAKM,EAAS,IAAIC,KAClBN,IAAKK,EAAS,IAAIE,QAGlBhB,EAAAC,EAAAC,cAACe,EAAD,QClDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.90269488.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Body.css\";\r\n\r\n// By importing the Navbar.css file, it is added to the DOM whenever this component loads\r\n\r\nfunction Navbar() {\r\n  return (\r\n<div>\r\n<ul className=\"nav justify-content-center fixed-top\">\r\n  <li className=\"nav-item\">\r\n    <h3>Clicky Game </h3>\r\n  </li>\r\n  <li className=\"nav-item\">\r\n  <p> You Guessed!</p>\r\n  </li>\r\n  <li className=\"nav-item\">\r\n  <p> Score: | Top Score: </p>\r\n  </li>\r\n</ul>\r\n\r\n<header>\r\n  <div className=\"header-text\">\r\n<h1>Clicky Game!</h1>\r\n<h4>Click on an image to earn points, but don't click on any more than once!</h4>\r\n</div>\r\n</header>\r\n\r\n</div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../styles/Body.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n<div>\r\n<footer className=\"fixed-bottom\">          \r\n    <div className=\"footer-top\">\r\n    </div>\r\n    <div className=\"footer-bottom \">\r\n        Clicky Game DS 2019 \r\n    </div>\r\n\r\n</footer>\r\n</div>\r\n  );\r\n}\r\n\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"../styles/Body.css\";\r\n\r\nfunction Game() {\r\n  return (\r\n<div>\r\n\r\n</div>\r\n  );\r\n}\r\n\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport \"../styles/Game.css\"\r\n\r\nfunction Cards (props){\r\n    return(\r\n        <div className=\"col\">\r\n            <div className=\"image-holder\">\r\n                <img alt={props.alt} src={props.src}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n\r\n// function Cards (props){\r\n//     return(\r\n//         <div className=\"card\">\r\n//         <div className=\"image-holder\">\r\n//         <img alt={props.name} src={props.image}/>\r\n//         </div>\r\n//         </div>\r\n//     )\r\n// }","import React from 'react';\nimport Navbar from './components/Body';\nimport Footer from './components/Footer';\nimport Game from './components/Game';\nimport Cards from './components/pictureCard';\nimport pictures from \"./gamePictures.json\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Game/>\n      <Cards\n            alt={pictures[0].name}\n            src={pictures[0].image}\n      />\n      <Cards\n      alt={pictures[1].name}\n      src={pictures[1].image}\n      />\n            <Cards\n      alt={pictures[2].name}\n      src={pictures[2].image}\n      />\n            <Cards\n      alt={pictures[3].name}\n      src={pictures[3].image}\n      />\n            <Cards\n      alt={pictures[4].name}\n      src={pictures[4].image}\n      />\n            <Cards\n      alt={pictures[5].name}\n      src={pictures[5].image}\n      />\n            <Cards\n      alt={pictures[6].name}\n      src={pictures[6].image}\n      />\n            <Cards\n      alt={pictures[7].name}\n      src={pictures[7].image}\n      />\n            <Cards\n      alt={pictures[8].name}\n      src={pictures[9].image}\n      />\n            <Cards\n      alt={pictures[9].name}\n      src={pictures[9].image}\n      />\n            <Cards\n      alt={pictures[10].name}\n      src={pictures[10].image}\n      />\n            <Cards\n      alt={pictures[11].name}\n      src={pictures[11].image}\n      />\n    \n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}